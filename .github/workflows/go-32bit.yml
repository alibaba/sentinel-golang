name: CI for 32-bit

on:
  push:
    branches: master
  pull_request:
    branches: "*"

jobs:

  build:
    name: ${{ matrix.os }} - Go ${{ matrix.go_version }}
    runs-on: ubuntu-latest
    strategy:
     # If you want to matrix build , you can append the following list.
      matrix:
        go_version:
          - 1.13
          - 1.14
        os:
          - ubuntu-latest

    steps:

    - name: Set up Go ${{ matrix.go_version }}
      uses: actions/setup-go@v2
      with:
        go-version: ${{ matrix.go_version }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Cache build dependence
      uses: actions/cache@v2
      with:
        # Cache
        path: ~/go/pkg/mod
        # Cache key
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        # An ordered list of keys to use for restoring the cache if no cache hit occurred for key
        restore-keys: ${{ runner.os }}-go-

    - name: Install goimports
      run: go get golang.org/x/tools/cmd/goimports

    - name: Install go ci lint
      # 1. download the install.sh file of golangci-lint
      # 2. replace the arch name which will be joined as the golangci-lint resource file name will download in install.sh
      #    the golangci-lint resource file is in the tag which has tagged and will do really install action
      # 3. execute install.sh to do really install action
      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sed 's/ARCH=$(uname_arch)/ARCH=386/g' | sh -s -- -b $(go env GOPATH)/bin v1.27.0

    - name: Run Linter
      run: golangci-lint run --timeout=10m -v --disable-all --enable=govet --enable=staticcheck --enable=ineffassign --enable=misspell

    - name: Test
      run: |
        diff -u <(echo -n) <(gofmt -d -s .)
        diff -u <(echo -n) <(goimports -d .)
        go test -v -race ./... -coverprofile=coverage.txt -covermode=atomic
        cd ./pkg/datasource/consul
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../etcdv3
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../k8s
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../nacos
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../apollo
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../../adapters/echo
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../gear
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../gin
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../grpc
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
        cd ../micro
        go test -race -count=1 ./... -coverprofile=coverage.txt -covermode=atomic
    - name: Coverage
      run: bash <(curl -s https://codecov.io/bash)
