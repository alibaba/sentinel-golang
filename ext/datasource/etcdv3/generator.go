package etcdv3

import (
	"github.com/alibaba/sentinel-golang/ext/datasource"
	"github.com/coreos/etcd/clientv3"
	"github.com/pkg/errors"
)

type DatasourceGenerator struct {
	etcdv3Client *clientv3.Client
	// datasource list generated by this generator.
	datasources []datasource.DataSource
}

func NewDatasourceGenerator(config *clientv3.Config) (*DatasourceGenerator, error) {
	client, err := clientv3.New(*config)
	if err != nil {
		return nil, errors.Errorf("Fail to instance etcdv3 client, err: %+v", err)
	}
	return &DatasourceGenerator{
		etcdv3Client: client,
		datasources:  make([]datasource.DataSource, 0),
	}, nil
}

func (g *DatasourceGenerator) Generate(key string, handlers ...datasource.PropertyHandler) (*Etcdv3DataSource, error) {
	var err error
	if g.etcdv3Client == nil {
		err = errors.New("The etcdv3 client is nil in DatasourceGenerator.")
		return nil, err
	}
	ds := &Etcdv3DataSource{
		client:      g.etcdv3Client,
		propertyKey: key,
	}
	for _, h := range handlers {
		ds.AddPropertyHandler(h)
	}
	g.datasources = append(g.datasources, ds)
	return ds, err
}

func (g *DatasourceGenerator) closeable() bool {
	return len(g.datasources) == 0
}

func (g *DatasourceGenerator) close() error {
	if len(g.datasources) != 0 {
		return errors.New("The datasources is not empty in this DatasourceGenerator.")
	}
	return g.etcdv3Client.Close()
}
